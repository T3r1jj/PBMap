apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

def props = new Properties()
file("../signing.properties").withInputStream { props.load(it) }

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'
    defaultConfig {
        resConfigs "en", "en_GB", "en_US", "pl", "ru", "ja"
        applicationId "io.github.t3r1jj.pbmap"
        minSdkVersion 14
        targetSdkVersion 28
        versionCode buildVersionCode()
        versionName version
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        setProperty("archivesBaseName", "io.github.t3r1jj.pbmap-$versionName")
    }
    signingConfigs {
        release {
            keyAlias props.getProperty('keyAlias')
            keyPassword props.getProperty('keyPassword')
            storeFile file(props.getProperty('storeFile'))
            storePassword props.getProperty('storePassword')
        }
    }
    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    buildTypes.each {
        it.buildConfigField 'String', 'ASSETS_MAP_DIR', ASSETS_MAP_DIR
        it.buildConfigField 'String', 'FIRST_MAP_FILENAME', FIRST_MAP_FILENAME
        it.buildConfigField 'String', 'NOTICE_PATH', NOTICE_PATH
        it.buildConfigField 'String', 'FONT_PATH', FONT_PATH
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions{
        jvmTarget = '1.8'
    }
    packagingOptions {
        exclude 'META-INF/LICENSE.md'
        exclude 'META-INF/LICENSE-notice.md'
    }
    testOptions {
        animationsDisabled = true
        unitTests.includeAndroidResources = true
        unitTests.returnDefaultValues = true
    }
    bundle {
        language {
            enableSplit = false
        }
    }
    useLibrary 'android.test.runner'
    useLibrary 'android.test.base'
    useLibrary 'android.test.mock'
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "androidx.appcompat:appcompat:$androidx_appcompat_version"
    implementation "androidx.preference:preference:$androidx_appcompat_version"
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation "com.google.android.material:material:$android_material_version"
    implementation 'com.qozix:tileview:2.2.6'
    implementation('org.simpleframework:simple-xml:2.7.1') {
        exclude module: 'stax'
        exclude module: 'stax-api'
        exclude module: 'xpp3'
    }
    implementation 'com.roughike:swipe-selector:1.0.6'
    implementation 'com.github.clans:fab:1.6.4'
    implementation 'com.getkeepsafe.taptargetview:taptargetview:1.9.1'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "com.github.YarikSOffice:lingver:1.1.0"
    implementation 'net.sourceforge.streamsupport:android-retrostreams:1.7.1'

    testImplementation "androidx.test.ext:truth:$androidx_test_version"
    testImplementation "junit:junit:$junit_version"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_jupiter_version"
    testImplementation "org.mockito:mockito-core:$mockito_version"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0"
    testImplementation group: 'org.powermock', name: 'powermock-core', version: "$powermock_version"
    testImplementation group: 'org.powermock', name: 'powermock-module-junit4', version: "$powermock_version"
    testImplementation group: 'org.powermock', name: 'powermock-api-mockito2', version: "$powermock_version"

    androidTestImplementation("androidx.test.espresso:espresso-core:$espresso_version", {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    androidTestImplementation "androidx.test:core:$androidx_test_version"
    androidTestImplementation "androidx.test:runner:$androidx_test_version"
    androidTestImplementation "androidx.test:rules:$androidx_test_version"
    androidTestImplementation "androidx.test.ext:junit:$androidx_test_junit_version"
    androidTestImplementation "androidx.test.espresso:espresso-intents:$espresso_version"
    androidTestImplementation "androidx.test.uiautomator:uiautomator:$uiautomator_version"
    androidTestImplementation "org.junit.jupiter:junit-jupiter-api:$junit_jupiter_version"
    androidTestImplementation "org.mockito:mockito-core:$mockito_version"
    androidTestImplementation 'com.linkedin.dexmaker:dexmaker-mockito:2.19.0'
    androidTestImplementation "com.21buttons:fragment-test-rule:$fragment_test_rule_version"
    androidTestImplementation "androidx.test.uiautomator:uiautomator:$uiautomator_version"
    androidTestImplementation project(':testing')

    debugImplementation "com.21buttons:fragment-test-rule-extras:$fragment_test_rule_version"
}

task copyNOTICE(type: Copy) {
    description 'Copying NOTICE.html to assets for display in app'
    from '../'
    into 'src/main/assets'
    include 'NOTICE.html'
}

preBuild.dependsOn copyNOTICE
repositories {
    mavenCentral()
}

project.gradle.taskGraph.whenReady {
    connectedDebugAndroidTest.doLast {
        installDebug.install()
        installDebugAndroidTest.install()
    }
}

task buildDictionary << {
    def defaultLanguage = "default"
    def foundLocales = new StringBuilder()
    foundLocales.append("new String[]{")

    fileTree("src/main/res").visit { FileVisitDetails details ->
        if(details.file.path.endsWith("strings.xml")){
            def languageCode = details.file.parent.split("\\\\|/").last().replaceAll('values-','').replaceAll('-r','_')
            languageCode = (languageCode == "values") ? defaultLanguage : languageCode
            foundLocales.append("\"").append(languageCode).append("\"").append(",")
        }
    }

    foundLocales.append("}")
    def foundLocalesString = foundLocales.toString().replaceAll(',}','}')
    android.defaultConfig.buildConfigField "String[]", "LANGUAGES", foundLocalesString
    android.defaultConfig.buildConfigField "String", "DEFAULT_LANGUAGE", "\"${defaultLanguage}\""

}
preBuild.dependsOn buildDictionary