# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

platform :android do
  desc "Run the unit tests"
  lane :unit_tests do
    gradle(task: "test")
  end

  desc "Run all tests with code coverage"
  lane :all_tests do
    gradle(task: "combinedTestReportDebug")
  end

  desc "Run all tests with code coverage (small)"
  lane :all_tests_small do
    gradle(task: "combinedTestReportDebug -Pandroid.testInstrumentationRunnerArguments.size=small")
  end

  desc "Run instrumentation tests with code coverage (medium)"
  lane :all_tests_medium do
    gradle(task: "createDebugCoverageReport -Pandroid.testInstrumentationRunnerArguments.size=medium")
  end

  desc "Run instrumentation tests with code coverage (large)"
  lane :all_tests_large do
    gradle(task: "createDebugCoverageReport -Pandroid.testInstrumentationRunnerArguments.size=large")
  end

  desc "Assemble a debug apk"
  lane :assemble_debug do
    gradle(task: "assembleDebug")
  end

  desc "Assemble an android test apk"
  lane :assemble_android_test do
    gradle(task: "assembleDebugAndroidTest")
  end

  desc "Run the instrumentation tests in the Firebase test lab"
  lane :deploy_tests do
    assemble_debug
    assemble_android_test
    apk = lane_context[SharedValues::GRADLE_ALL_APK_OUTPUT_PATHS].select do | path |
        path.to_s.include?("/apk/debug/") && !path.to_s.include?("sample")
    end
    testApk = lane_context[SharedValues::GRADLE_ALL_APK_OUTPUT_PATHS].select do | path |
        path.to_s.include?("/apk/androidTest/") && !path.to_s.include?("sample")
    end
    sh("../ci/run_firebase_tests.sh", apk[0], testApk[0])
  end

  desc "Deploy the app to the internal track"
  lane :deploy_internal do
    gradle(task: "bundleRelease")
    apk = lane_context[SharedValues::GRADLE_ALL_AAB_OUTPUT_PATHS].select do | path |
        !path.to_s.include?("sample")
    end
    supply(
      track: 'internal',
      aab: apk[0]
    )
  end
end
